{"version":3,"sources":["app/components/PerformanceCreateForm.tsx","app/components/PerformanceDestroyForm.tsx","app/components/PerformanceEditForm.tsx","app/components/PerformanceCard.tsx","app/components/PerformanceList.tsx","assets/images/longestnight-sunset-2.0.svg","app/components/EventHeader.tsx","app/components/EventPage.tsx","app/App.tsx","index.tsx"],"names":["PerformanceCreateForm","eventUrl","startsAt","endsAt","useState","name","setName","email","setEmail","description","setDescription","streamkey","setStreamKey","location","setLocation","muxyApiKey","process","REACT_APP_MUXY_API_KEY","muxyUrl","REACT_APP_MUXY_URL","className","onSubmit","e","preventDefault","fetch","method","headers","Headers","Authorization","Accept","body","JSON","stringify","publisher_name","publisher_email","timezone","Intl","DateTimeFormat","resolvedOptions","timeZone","event","starts_at","ends_at","then","res","json","data","key","catch","console","error","id","type","placeholder","value","onChange","target","required","PerformanceDestroyForm","streamUrl","onRemove","streamKey","failed","setFailed","ok","err","style","color","PerformanceEditForm","currMuxyStream","onSetInEditMode","setCurrMuxyStream","PerformanceCard","muxyStream","cycleNo","inCreateMode","setInCreateMode","inRemoveMode","setInRemoveMode","inEditMode","setInEditMode","removed","setRemoved","startsAtHs","DateTime","fromISO","toFormat","endsAtHs","text","join","resetFormStates","onClick","prevState","url","PerformanceList","slug","setReservedStreamCount","setTotalStreamCount","muxyStreams","setMuxyStreams","useEffect","allStreams","useMemo","startsAtDt","diff","toObject","numSlots","minutes","results","Array","from","map","_","i","streamStartsAtDt","plus","streamEndsAtDt","streamStartsAt","toUTC","streamEndsAt","find","stream","length","index","EventHeader","progressBarValues","reservedStreamCount","totalStreamCount","reserved","total","percent","calcProgressbar","src","logo","alt","bgColor","baseBgColor","labelClassName","labelAlignment","width","height","margin","customLabel","completed","href","EventPage","muxyEvents","setMuxyEvents","eventSlug","REACT_APP_EVENT_SLUG","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c7a5d351.chunk.js","sourcesContent":["import React, { ReactElement, useState } from 'react';\n\ninterface Props {\n    eventUrl: string,\n    startsAt: string,\n    endsAt: string\n}\n\nfunction PerformanceCreateForm({eventUrl, startsAt, endsAt}: Props): ReactElement {\n    const [name, setName] = useState<string>(\"\");\n    const [email, setEmail] = useState<string>(\"\");\n    const [description, setDescription] = useState<string>(\"\");\n    const [streamkey, setStreamKey] = useState<string>(\"\");\n    const [location, setLocation] = useState<string>(\"\");\n    const muxyApiKey: string = (process.env.REACT_APP_MUXY_API_KEY as string);\n    const muxyUrl: string = (process.env.REACT_APP_MUXY_URL as string);\n\n    const handleSubmit = (e: React.FormEvent) => {\n        e.preventDefault();\n        fetch(`${muxyUrl}/streams/`, {\n          method: \"post\",\n          headers: new Headers({\n            Authorization: `Api-Key ${muxyApiKey}`,\n            \"Content-Type\": \"application/json\",\n            Accept: \"application/json\",\n          }),\n          body: JSON.stringify({\n            publisher_name: name,\n            publisher_email: email,\n            description: description,\n            location: location,\n            timezone: Intl.DateTimeFormat().resolvedOptions().timeZone,\n            event: eventUrl, // This needs to come from the muxy event (isn't available right now)\n            starts_at: startsAt, // This needs to be calculated before\n            ends_at: endsAt, // This needs to be calculated before\n          }),\n        })\n          .then((res) => res.json())\n          .then((data) => {\n            setStreamKey(data.key);\n          })\n          .catch(console.error);\n    }\n\n    return (\n        <>\n        {streamkey && (\n            <div>\n                <p>You have successfully registered for the event. Your streamkey is <b>{streamkey}</b> </p>\n                <p>You should have received this as an email too. </p>\n                <p>Save this key well, you will need it for the event and also to delete your slot again. </p>\n                <p>When this page is reloaded, the key will no longer be displayed. </p>\n            </div>\n        )}\n        {!streamkey && (\n           <form className=\"PerformanceCreateForm\" onSubmit={handleSubmit}>\n                <input id=\"name\" type=\"text\" placeholder=\"Name\" value={name}\n                    onChange={e => setName(e.target.value)} required />\n                <input id=\"email\" type=\"text\" placeholder=\"E-Mail\" value={email}\n                    onChange={e => setEmail(e.target.value)} required />\n                <input id=\"description\" type=\"text\" placeholder=\"Description\" value={description}\n                       onChange={e => setDescription(e.target.value)} required />\n                <input id=\"location\" type=\"text\" placeholder=\"Location\" value={location}\n                       onChange={e => setLocation(e.target.value)} required />\n                <input type=\"submit\" className=\"card-button\" value=\"Rave On\"/>\n            </form>\n            )}\n        </>\n    );\n}\n\nexport default PerformanceCreateForm;\n","import React, { ReactElement, useState } from \"react\";\n\ninterface Props {\n  streamUrl: string;\n  onRemove: () => void;\n}\n\nfunction PerformanceDestroyForm({ streamUrl, onRemove }: Props): ReactElement {\n  const [streamKey, setStreamKey] = useState<string>(\"\");\n  const [failed, setFailed] = useState<boolean>(false);\n  const muxyApiKey: string = process.env.REACT_APP_MUXY_API_KEY as string;\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    setFailed(false);\n\n    const headers = new Headers({\n      Authorization: `Api-Key ${muxyApiKey}`,\n      \"X-Stream-Key\": streamKey,\n      \"Content-Type\": \"application/json\",\n      Accept: \"application/json\",\n    });\n\n    fetch(streamUrl, {\n      method: \"DELETE\",\n      headers,\n    })\n      .then((res) => {\n        if (res.ok) {\n          setStreamKey(\"\");\n          onRemove && onRemove();\n        } else {\n          setFailed(true);\n        }\n      })\n      .catch((err) => {\n        console.error(err);\n        setFailed(true);\n      });\n  };\n\n  return (\n    <>\n      {\n        <form className=\"PerformanceCreateForm\" onSubmit={handleSubmit}>\n          <p>\n            Enter your streaming key to confirm you want to remove your slot. If\n            you do not remember your streaming key, please contact the event\n            organizer.\n          </p>\n\n          {failed && (\n            <p style={{ color: \"red\" }}>\n              Something went wrong, did you entered the incorrect stream key? Please try again.\n            </p>\n          )}\n          <input\n            id=\"key\"\n            type=\"text\"\n            placeholder=\"Stream key\"\n            value={streamKey}\n            onChange={(e) => setStreamKey(e.target.value)}\n            required\n          />\n          <input type=\"submit\" className=\"card-button\" value=\"Remove slot\" />\n        </form>\n      }\n    </>\n  );\n}\n\nexport default PerformanceDestroyForm;\n","import React, { ReactElement, useState } from 'react';\nimport { MuxyStream } from \"../types\";\n\ninterface Props {\n    streamUrl: string;\n    currMuxyStream: MuxyStream;\n    onSetInEditMode: (inEditMode: boolean) => void;\n    setCurrMuxyStream: (muxyStream: MuxyStream) => void;\n}\n\nfunction PerformanceEditForm({ streamUrl, currMuxyStream, onSetInEditMode, setCurrMuxyStream }: Props): ReactElement {\n    const [name, setName] = useState<string>(currMuxyStream.publisher_name);\n    const [description, setDescription] = useState<string>(currMuxyStream.description);\n    const [streamKey, setStreamKey] = useState<string>(\"\");\n    const [location, setLocation] = useState<string>(currMuxyStream.location);\n    const [failed, setFailed] = useState<boolean>(false);\n    const muxyApiKey: string = process.env.REACT_APP_MUXY_API_KEY as string;\n\n    const handleSubmit = (e: React.FormEvent) => {\n\n        e.preventDefault();\n        setFailed(false);\n\n        const headers = new Headers({\n            Authorization: `Api-Key ${muxyApiKey}`,\n            \"X-Stream-Key\": streamKey,\n            \"Content-Type\": \"application/json\",\n            Accept: \"application/json\",\n        });\n\n        const body = JSON.stringify({\n            publisher_name: name,\n            description: description,\n            location: location,\n            ends_at: currMuxyStream.ends_at,\n            starts_at: currMuxyStream.starts_at,\n            event: currMuxyStream.event,\n        });\n\n        fetch(streamUrl, {\n            method: \"PUT\",\n            headers,\n            body\n        })\n        .then((res) => {\n            if (res.ok) {\n                setStreamKey(\"\");\n                onSetInEditMode(false);\n                setCurrMuxyStream({\n                    ...currMuxyStream,\n                    publisher_name: name,\n                    description: description,\n                    location: location\n                })\n            } else {\n                setFailed(true);\n            }\n        })\n        .catch((err) => {\n            console.error(err);\n            setFailed(true);\n        });\n    };\n\n    return (\n        <div className=\"PerformanceEditForm\">\n            <form className=\"PerformanceCreateForm\" onSubmit={handleSubmit}>\n                <p>\n                    Enter your streaming key to confirm you want to edit your slot. If\n                    you do not remember your streaming key, please contact the event\n                    organizer.\n                </p>\n                {failed && (\n                    <p style={{ color: \"red\" }}>\n                        Something went wrong, did you entered the incorrect stream key? Please try again.\n                    </p>\n                )}\n\n                <input id=\"key\" type=\"text\" placeholder=\"Stream-Key\" value={streamKey}\n                       onChange={e => setStreamKey(e.target.value)} required />\n                <p>\n                    Here you find your stream information that you can edit.\n                    The email address can not displayed for security reasons. If you have problems\n                    with your e-mail adress, please contace the event organizer.\n                    The information will only be updated if you have entered the correct stream key.\n                </p>\n                <input id=\"name\" type=\"text\" placeholder=\"Name\" value={name}\n                       onChange={e => setName(e.target.value)} required />\n                <input id=\"description\" type=\"text\" placeholder=\"Description\" value={description}\n                       onChange={e => setDescription(e.target.value)} required />\n                <input id=\"location\" type=\"text\" placeholder=\"Location\" value={location}\n                       onChange={e => setLocation(e.target.value)} required />\n                <input type=\"submit\" className=\"card-button\" value=\"Save\"/>\n            </form>\n        </div>\n    );\n}\n\nexport default PerformanceEditForm;\n","import React, { ReactElement, useState } from \"react\";\nimport \"../../assets/css/PerformanceCard.css\";\nimport { EmptyMuxyStream, MuxyStream } from \"../types\";\nimport PerformanceCreateForm from \"./PerformanceCreateForm\";\nimport PerformanceDestroyForm from \"./PerformanceDestroyForm\";\nimport { DateTime } from \"luxon\";\nimport PerformanceEditForm from \"./PerformanceEditForm\";\n\ninterface Props {\n  muxyStream: MuxyStream | EmptyMuxyStream;\n  cycleNo: number;\n  eventUrl: string;\n}\n\nconst PerformanceCard = ({\n  muxyStream,\n  cycleNo,\n  eventUrl,\n}: Props): ReactElement => {\n  const [inCreateMode, setInCreateMode] = useState<boolean>(false);\n  const [currMuxyStream, setCurrMuxyStream] = useState<MuxyStream | EmptyMuxyStream>(muxyStream);\n  const [inRemoveMode, setInRemoveMode] = useState<boolean>(false);\n  const [inEditMode, setInEditMode] = useState<boolean>(false);\n  const [removed, setRemoved] = useState<boolean>(false);\n\n  const startsAtHs = DateTime.fromISO(muxyStream.starts_at).toFormat(\"HH:mm LLL dd\");\n  const endsAtHs = DateTime.fromISO(muxyStream.ends_at).toFormat(\"HH:mm LLL dd\");\n\n  let text = null;\n  if (\"publisher_name\" in currMuxyStream) {\n    const { publisher_name, location, description, timezone } = currMuxyStream;\n    text = [publisher_name, location, description, timezone].join(\" / \");\n  }\n\n  const resetFormStates = () => {\n    setInCreateMode(false);\n    setInRemoveMode(false);\n    setInEditMode(false);\n  }\n\n  const handleEditClick = () => {\n    resetFormStates();\n    setInEditMode((prevState) => !prevState)\n  };\n\n  const handleRemoveClick = () => {\n    resetFormStates();\n    setInRemoveMode((prevState) => !prevState);\n  }\n  const handleRemove = () => setRemoved(true);\n\n  return (\n    <div className=\"card\">\n      <div className=\"card-body\">\n        <p className=\"card-header\">Cycle #{cycleNo}</p>\n        <p className=\"card-time\">\n          {startsAtHs}-{endsAtHs}{\" \"}\n          {!inCreateMode && !text && (\n            <button\n              className=\"card-button-plus\"\n              onClick={() => setInCreateMode(true)}\n            >\n              +\n            </button>\n          )}\n        </p>\n        {removed && <p>You have removed your slot succesfully.</p>}\n        {inCreateMode ? (\n          <PerformanceCreateForm\n            eventUrl={eventUrl}\n            startsAt={currMuxyStream.starts_at}\n            endsAt={currMuxyStream.ends_at}\n          />\n        ) : (\n          <>\n            <p className=\"card-text\">{removed ? \"\" : text || \"\"}</p>\n            {!removed && text && (\n              <>\n                <button onClick={handleEditClick} className=\"card-button\">\n                  Edit\n                </button>\n                <button onClick={handleRemoveClick} className=\"card-button\">\n                  Remove\n                </button>\n                {inEditMode && \"url\" in currMuxyStream && (\n                    <PerformanceEditForm\n                        streamUrl={currMuxyStream.url}\n                        currMuxyStream={currMuxyStream}\n                        onSetInEditMode={setInEditMode}\n                        setCurrMuxyStream={setCurrMuxyStream}\n                    />\n                )}\n                {inRemoveMode && \"url\" in currMuxyStream && (\n                  <PerformanceDestroyForm\n                    streamUrl={currMuxyStream.url}\n                    onRemove={handleRemove}\n                  />\n                )}\n              </>\n            )}\n          </>\n        )}\n\n        <hr />\n      </div>\n    </div>\n  );\n};\n\nexport default PerformanceCard;\n","import React, { ReactElement, useEffect, useState, useMemo } from \"react\";\nimport \"../../assets/css/PerformanceList.css\";\nimport { MuxyStreams, MuxyStream, EmptyMuxyStream } from \"../types\";\nimport PerformanceCard from \"./PerformanceCard\";\nimport { DateTime } from \"luxon\";\n\ninterface Props {\n  slug: string;\n  eventUrl: string;\n  startsAt: string;\n  endsAt: string;\n  setReservedStreamCount: (reservedStreamCount: number | null) => void;\n  setTotalStreamCount: (ttalStreamCount: number | null) => void;\n}\n\nconst SLOT_DURATION_MIN = 20;\n\nconst PerformanceList = ({slug, eventUrl, startsAt, endsAt, setReservedStreamCount, setTotalStreamCount}: Props): ReactElement => {\n    const muxyApiKey: string = (process.env.REACT_APP_MUXY_API_KEY as string);\n    const muxyUrl: string = (process.env.REACT_APP_MUXY_URL as string);\n    const [muxyStreams, setMuxyStreams] = useState<MuxyStreams | null>(null);\n\n    useEffect(() => {\n      fetch(`${muxyUrl}/streams/?event__slug=${slug}`, {\n        method: \"get\",\n        headers: new Headers({\n          Authorization: `Api-Key ${muxyApiKey}`,\n        }),\n      })\n        .then((res) => res.json())\n        .then((data) => {\n          setMuxyStreams(data);\n        })\n        .catch(console.error);\n    }, [slug]);\n\n  const allStreams: (MuxyStream | EmptyMuxyStream)[] = useMemo(() => {\n    if (!startsAt || !endsAt) return [];\n    if (!muxyStreams) return [];\n\n    // eslint-disable-next-line no-debugger\n    const startsAtDt = DateTime.fromISO(startsAt);\n    const endsAtDt = DateTime.fromISO(endsAt);\n\n    const diff = endsAtDt.diff(startsAtDt, [\"minute\"]).toObject();\n    const numSlots = diff?.minutes ? diff.minutes / SLOT_DURATION_MIN : 0;\n\n    const results = muxyStreams?.results || [];\n\n    // Build slots array\n    const slots = Array.from(Array(numSlots)).map((_, i) => {\n      const streamStartsAtDt = startsAtDt.plus({\n        minutes: i * SLOT_DURATION_MIN,\n      });\n      const streamEndsAtDt = streamStartsAtDt.plus({\n        minutes: SLOT_DURATION_MIN,\n      });\n\n      const streamStartsAt = streamStartsAtDt.toUTC().toFormat(\"yyyy-MM-dd'T'HH:mm:ss'Z'\");\n      const streamEndsAt = streamEndsAtDt.toUTC().toFormat(\"yyyy-MM-dd'T'HH:mm:ss'Z'\")\n      const stream = results.find(\n        (stream) =>\n          stream.starts_at == streamStartsAt && stream.ends_at == streamEndsAt\n      );\n\n      return stream || { starts_at: streamStartsAt, ends_at: streamEndsAt };\n    });\n\n    return slots\n  }, [muxyStreams]);\n\n  setReservedStreamCount(muxyStreams ? muxyStreams.results.length: 0);\n  setTotalStreamCount(allStreams ? allStreams.length: 0);\n\n  return (\n    <div className=\"performance-list\">\n      {allStreams &&\n        allStreams.map((muxyStream, index) => (\n          <PerformanceCard\n            key={index}\n            eventUrl={eventUrl}\n            muxyStream={muxyStream}\n            cycleNo={index + 1}\n          />\n        ))}\n    </div>\n  );\n};\nexport default PerformanceList;\n","export default __webpack_public_path__ + \"static/media/longestnight-sunset-2.0.2ad7016e.svg\";","import React, { ReactElement } from 'react';\nimport logo from \"../../assets/images/longestnight-sunset-2.0.svg\";\nimport { MuxyEvent } from \"../types\";\nimport { DateTime } from \"luxon\";\nimport ProgressBar from \"@ramonak/react-progress-bar\";\n\ninterface Props {\n    event: MuxyEvent | undefined\n    reservedStreamCount: number | null\n    totalStreamCount: number | null\n}\n\ninterface ProgressType {\n    reserved: number,\n    total: number\n    percent: number;\n}\n\nfunction EventHeader({event, reservedStreamCount, totalStreamCount}:Props): ReactElement {\n\n    const calcProgressbar = (reservedStreamCount: number | null, totalStreamCount: number | null) : ProgressType => {\n        if (reservedStreamCount === null || totalStreamCount === null) {\n            return {reserved: 0, total: 0, percent: 0};\n        }\n\n        return {reserved: reservedStreamCount, total: totalStreamCount, percent: (reservedStreamCount * 100) / totalStreamCount};\n    }\n\n    const progressBarValues = calcProgressbar(reservedStreamCount, totalStreamCount);\n\n    return (\n        <header className=\"App-header\">\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\n            <h4>Tidal Club Presents ...</h4>\n            <h1>The Longest Night</h1>\n            <h2> {event && DateTime.fromISO(event.starts_at).toFormat(\"dd. LLLL HH:mm\")} - {event && DateTime.fromISO(event.ends_at).toFormat(\"dd. LLLL HH:mm\")} {event && DateTime.fromISO(event.starts_at).toFormat(\"yyyy\")}</h2>\n            <hr/>\n\n            <ProgressBar\n                className=\"wrapper\"\n                bgColor={\"#ffce96\"}\n                baseBgColor={\"#bbbbbb54\"}\n                labelClassName=\"label\"\n                labelAlignment={\"outside\"}\n                width={\"100%\"}\n                height={\"28px\"}\n                margin={\"8px\"}\n                customLabel={`${progressBarValues.reserved}/${progressBarValues.total} slots are filled`}\n                completed={progressBarValues.percent}\n            />\n\n            <hr/>\n            <p>Your timezone: {Intl.DateTimeFormat().resolvedOptions().timeZone}</p>\n            <p className=\"link-paragraph\"><a href={\"https://www.youtube.com/eulerroom/live\"}>https://www.youtube.com/eulerroom/live</a></p>\n            <p className=\"link-paragraph\"><a href={\"https://www.twitch.tv/eulerroom\"}>https://www.twitch.tv/eulerroom</a></p>\n        </header>\n    );\n}\n\nexport default EventHeader;\n","import React, { ReactElement, useEffect, useState } from 'react';\nimport PerformanceList from \"../components/PerformanceList\";\nimport { MuxyEvents } from \"../types\";\nimport EventHeader from \"./EventHeader\";\n\nfunction EventPage(): ReactElement {\n    const [muxyEvents, setMuxyEvents] = useState<MuxyEvents | null>(null);\n    const [reservedStreamCount, setReservedStreamCount] = useState<number | null>(null);\n    const [totalStreamCount, setTotalStreamCount] = useState<number | null>(null);\n\n    const muxyApiKey: string = (process.env.REACT_APP_MUXY_API_KEY as string);\n    const muxyUrl: string = (process.env.REACT_APP_MUXY_URL as string);\n    const eventSlug: string = (process.env.REACT_APP_EVENT_SLUG as string);\n\n    useEffect(() => {\n      fetch(`${muxyUrl}/events/?slug=${eventSlug}`, {\n        method: \"get\",\n        headers: new Headers({\n          Authorization: `Api-Key ${muxyApiKey}`,\n        }),\n      })\n        .then((res) => res.json())\n        .then((data) => {\n          setMuxyEvents(data);\n        })\n        .catch(console.error);\n    }, [eventSlug]);\n\n    const event = muxyEvents?.results[0];\n\n    return (\n      <main className=\"App\">\n        <EventHeader event={event} reservedStreamCount={reservedStreamCount} totalStreamCount={totalStreamCount}/>\n        {event && (\n          <PerformanceList\n            slug={event.slug}\n            eventUrl={event.url}\n            startsAt={event.starts_at}\n            endsAt={event.ends_at}\n            setReservedStreamCount={setReservedStreamCount}\n            setTotalStreamCount={setTotalStreamCount}\n          />\n        )}\n      </main>\n    );\n}\n\nexport default EventPage;\n","import React, { ReactElement } from 'react';\nimport EventPage from \"./components/EventPage\";\n\nfunction App(): ReactElement {\n  return <EventPage />\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './assets/css/styles.css';\nimport App from './app/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}